#!/usr/bin/env ruby

require 'awesome_print'
require 'pry'
require 'yaml'

class Hash
  class << self
    def endless_proc
      Proc.new do |h,k|
        h[k] = Hash.new(&endless_proc)
      end
    end

    def endless
      Hash.new(&endless_proc)
    end

    def make_endless(hash)
      hash.tap do |h|
        h.default_proc = endless_proc
        h.each do |k,v|
          next unless v.is_a?(Hash)
          h[k] = make_endless(v)
        end
      end
    end

    def with_default(default_value)
      Hash.new{|h,k| h[k] = default_value.clone }
    end
  end

  def select_keys(*keys)
    dup.select{|k,v| keys.include?(k) }
  end
  alias_method :pluck, :select_keys
  alias_method :slice, :select_keys
  alias_method :subset, :select_keys

  def deep_merge(other_hash, &block)
    dup.deep_merge!(other_hash, &block)
  end

  def deep_merge!(other_hash, &block)
    other_hash.each_pair do |current_key, other_value|
      this_value = self[current_key]

      self[current_key] = if this_value.is_a?(Hash) && other_value.is_a?(Hash)
        this_value.deep_merge(other_value, &block)
      else
        if block_given? && key?(current_key)
          block.call(current_key, this_value, other_value)
        else
          other_value
        end
      end
    end

    self
  end
end

require 'yaml'



class Config
  attr_accessor :file, :data_path

  def initialize(file, *data_path)
    @file, @data_path = file, data_path
  end

  def yaml_file
    @file #File.join(Dir.home, 'rippers.yml')
  end

  # def yaml_outfile
  #   File.join(Dir.home, 'rippers.yml')
  # end

  def yaml_data
    IO.read yaml_file
  end

  def read!
    @data = YAML.load(yaml_data) || {}
    Hash.make_endless(@data)
  end

  def read
    @data || read!
  end

  def save
    IO.write yaml_file, YAML.dump(@data)
    read!
  end

  def write
    save
  end

  def update(vals={})
    data.clear.merge!(vals)
  end

  def merge(vals={})
    data.deep_merge!(stringify_keys vals)
  end

  def stringify_keys(vals={})
    vals.tap do |strs|
      vals.keys.select{|k|
        k.is_a?(Symbol) && not(k.is_a?(String))
      }.each do |k|
        strs.merge!(k.to_s => strs.delete(k))
      end
    end
  end

  def all_data
    read
  end

  def data
    return all_data if data_path == []
    data_path.inject(all_data){|result,key|
      # result.merge!(key => result.fetch(key, {}))[key]
      result[key]
    }
  end
end

class SubcommandMatcher
  class << self
    def from(hash)
      new(hash)
    end

    def list_for(str)
      str.chars.inject([]) do |arr,c|
        arr.push((arr.last || '') + c)
      end
    end
  end

  attr_accessor :subcommands
  attr_accessor :subcommand_map
  attr_accessor :subcommand_names
  def initialize(hash_or_array)
    @subcommand_map = hash_or_array
    @subcommands = hash_or_array.keys
    @subcommand_names = hash_or_array.keys
  end

  def list_for(str)
    self.class.list_for(str)
  end

  def uniqs
    deletes = []
    subcommand_map.inject({}){|h,(k,v)|
      h.tap do |new_map|
        list_for(k).each do |e|
          if h.has_key?(e)
            deletes.push(e) if h[e] != v
          else
            new_map.merge!(e => v)
          end
        end
      end
    }.tap{|uniq_map|
      deletes.each{|k| uniq_map.delete(k) }
    }
  end

  def subcommand_variations
    subcommands.inject({}) do |h,name|
      h.merge( name => name.chars.reverse.inject([]){|a,c| a.map{|tail| c + tail }.push(c) } )
    end
  end

  def uniq_variations
    subcommand_variations.inject({}){|vars,(name,list)|
      duplicate_variations  = (subcommand_names - [name]).flat_map(&subcommand_variations.method(:fetch))
      duplicate_variations -= [name]
      (list - duplicate_variations).each do |variation|
        vars.merge! variation => subcommand_map[name]
      end
      vars
    }
  end

  def shortest_variations
    sorted_uniqs = uniqs.keys.sort_by(&:length)
    subcommand_names.inject({}){|h,name|
      h.merge(name => sorted_uniqs.find(&name.method(:start_with?)))
    }
  end

  def simple_syntax_for(full,abbr)
    return abbr if abbr == full
    right = full.slice(abbr.length, full.length)
    format('%s[%s]', abbr, right)
  end

  def complex_syntax_for(full,abbr)
    left,right = full.slice(0, abbr.length), full.slice(abbr.length, full.length)
    return right.chars.inject(abbr.dup){|syn,c| syn.dup.concat(?[.dup).concat(c.dup) }.concat(?].dup * right.dup.length)
    format('%s%s%s', abbr,
                     right.chars.map{|c| ?[ + c }.join,
                     ?] * right.length)
  end

  def syntax_formats
    shortest_variations.map{|full,abbr|
      # optional = full.slice(abbr.length, full.length)
      {
        full => {
          simple: simple_syntax_for(full, abbr), # format('%s[%s]', abbr, optional),
          complex: complex_syntax_for(full, abbr), # format('%s%s', abbr, optional.chars.map{|c| ?[ + c }.push(?] * optional.length).join),
        }
      }
    }.inject(:merge)
  end

  def syntax(type=:simple)
    type = :simple unless type.respond_to?(:to_sym) && %i[ simple complex ].include?(type.to_sym)
    syntax_formats.map{|k,h| { k => h[type.to_sym] } }.inject(:merge)
    # shortest_variations.map{|full,abbr|
    #   optional = full.slice(abbr.length, full.length)
    #   { full => format('%s[%s]', abbr, optional) }
    # }.inject(:merge)
  end
  alias_method :print_format, :syntax

  def match(cmd)
    uniqs[cmd]
  end
end


module LetHelper
  def self.let(name, &block)
    define_method(name, &block)
  end
end

class Subcommandable
  class << self
    attr_accessor :subcommand

    def inherited(base)
      base.extend LetHelper
    end

    def error_exit(msg=nil, &block)
      puts format('ERROR: %s', msg) if msg

      block.call if block_given?

      exit 1
    end

    def let(attr_name, &block)
      return unless block_given?
      attr_name = attr_name.to_sym unless attr_name.is_a?(Symbol)
      define_singleton_method(attr_name, block)
    end

    def print_subcommand_list
      puts <<-MESSAGE.lines.map{|l| l.chomp.sub(/^\s{8}/, '') }
        ERROR: Subcommand required.

        Possible subcommands:
          #{subcommand_matcher.syntax.values.join("\n  ")}
      MESSAGE
    end

    def run_with_hooks(&block)
      @before_hook.call if @before_hook
      block.call
      @after_hook.call if @after_hook
    end

    def run(args=argv)
      @args = args || argv
      @subcommand ||= args.shift

      if @subcommand.nil?
        if @no_subcommand.is_a?(Proc)
          run_with_hooks{ @no_subcommand.call }
          exit 0
        else
          print_subcommand_list
          exit 1
        end
      end

      @runner ||= subcommand_matcher.match(@subcommand)

      if @runner
        run_with_hooks{ @runner.call }
        exit 0
      end

      if @dynamic_subcommand
        run_with_hooks{ @dynamic_subcommand.call }
        exit 0
      end

      puts format('Runner/handler not found for the "%s" subcommand', subcommand)
      exit 1
    end

    def args
      argv
    end

    def argv
      @args ||= ARGV.clone
    end

    def subcommand_matcher
      SubcommandMatcher.new subcommands
    end

    def subcommand_names
      @subcommands.keys
    end

    def subcommands
      @subcommands ||= {}
    end

    def fallback_runner
      @fallback_runner ||= Proc.new do
        puts format('No handler for the "%s" subcommand', subcommand.inspect)
        exit 1
      end
    end

    def before(&block)
      @before_hook = block
    end

    def after(&block)
      @after_hook = block
    end

    def default_handler(&block)
      @no_subcommand = @dynamic_subcommand = block
    end

    def no_subcommand(&block)
      @no_subcommand = block
    end

    def dynamic_subcommand(&block)
      @dynamic_subcommand = block
    end

    def register_subcommand(*names, &block)
      names.each{|name| subcommands.merge!( name.to_s => block ) }
    end

    def load_subcommands_by_prefix(prefix)
      Dir[File.join(Dir.home, 'subcommands', format('%s-*', prefix))].each do |subcmd|
        load subcmd
      end
    end
  end
end

class PathEnv
  class << self
    def env
      ENV['PATH']
    end

    def split
      env.split(/:+/)
    end

    def list
      split.inject([]) do |arr,path|
        next arr unless File.exist?(path)
        arr.include?(path) ? arr : arr.push(path)
      end
    end

    def absolute_paths
      split.inject([]) do |list,path|
        abspath = File.absolute_path(path)
        next list unless File.exist?(abspath)
        list.include?(abspath) ? list : list.push(abspath)
      end
    end

    def all_glob(pattern='')
      format '{%s}/%s', list.join(?,), pattern
    end

    def find(exact_name)
      Dir[all_glob(exact_name)]
    end

    def search(name)
      Dir[all_glob('*%s*' % name)]
    end

    def fuzzy_search(pattern)
      Dir[all_glob('*%s*' % name.chars.join(?*))]
    end
  end
end

class HeroHelper
  class << self
    def run_inside_dir(dir, &block)
      return false unless block_given?
      pwd = Dir.pwd.tap{
        Dir.chdir(dir)
      }

      block.call.tap{
        Dir.chdir(pwd)
      }
    end
  end
end



class CmdPipe
  class << self
    def run(*args)
      new(*args).tap{|runner| runner.run }
    end

    def output(*args)
      new(*args).output
    end

    def print(*args)
      new(*args).print
    end
  end

  attr_accessor :chain, :options
  attr_accessor :reader, :writer
  def initialize(*args)
    @options = args.last.is_a?(Hash) ? args.pop : {}
    @chain = CommandChain.from_list(args.flatten) #.map{|cmd| Command.new(cmd) }
    @reader, @writer = IO.pipe
    # @pipes = Pipe.from_commands(@commands)
  end

  def run
    last_command = chain.last_command
    last_command.writer = writer

    chain.run

    reader.read.tap{|stdoutput|
      reader.close
      writer.close unless writer.closed?
    }
  end

  def output
    @output ||= run
  end

  def print
    puts output
  end

  class CommandChain
    class << self
      attr_accessor :first_command, :last_command

      def set_first_command(cmd)
        @first_command = cmd
      end

      def set_last_command(cmd)
        @last_command = cmd
      end

      def from_list(cmds)
        cmds.reverse.inject(nil){|piping_to,shell_cmd|
          new(shell_cmd, piping_to).tap do |precmd|
            if piping_to
              piping_to.precmd = precmd
            else
              set_last_command(precmd)
            end
          end
        }.tap{|first_command|
          set_first_command(first_command)
          cmd = first_command
          while cmd.subcmd
            r,w = IO.pipe

                   cmd.writer = w
            cmd.subcmd.reader = r

            cmd = cmd.subcmd
          end
        }
      end
    end

    attr_accessor :shell_cmd, :subcmd, :precmd
    attr_accessor :reader, :writer
    def initialize(shell_cmd, to_cmd=nil, from_cmd=nil)
      @shell_cmd, @subcmd, @precmd = shell_cmd, to_cmd, from_cmd
    end

    def first
      first_command
    end

    def last
      last_command
    end

    def last_command
      @last_command ||= subcmd ? subcmd.last_command : self
    end

    def first_command
      @first_command ||= precmd ? precmd.first_command : self
    end

    def to_a
      @to_array ||= [first_command].tap do |list|
        while list.last.subcmd
          list.push list.last.subcmd
        end
      end
    end

    def position
      to_a.index(self) + 1
    end

    def exec
      opts = {}
      opts.merge!(in: reader) if reader
      opts.merge!(out: writer) if writer
      system(shell_cmd, opts)
    end

    def run
      exec
      reader.close if reader
      writer.close if writer
      subcmd.run if subcmd
    end
  end
end



class CopyOrPaste
  class << self
    def copy(text, with_newline=false)
      CmdPipe.run("printf '%s'" % text, 'pbcopy')
      # cmd = with_newline ? 'echo' : 'printf'
      # `#{cmd} '#{text.chomp}' | pbcopy`
      show_copied_text
    end

    def show_copied_text
      system(%{printf 'The text copied was: "%s"' "$(pbpaste)"})
    end

    def paste(text=nil)
      system('pbpaste')
    end
  end
end



class MainCommand < Subcommandable

  def self.editor
    ENV['EDITOR'] || 'vim'
  end

  register_subcommand(:edit) {
    files = args.flat_map{|arg| PathEnv.search(arg) }

    system(editor, *files)
  }

  register_subcommand(:z) { # testing the exit codes for diff
    output = `diff /tmp/diff-test-a /tmp/diff-test-b &>/dev/null`
    ap output: output, sucessful: $?.success?

    output = `diff /tmp/diff-test-a /tmp/diff-test-c &>/dev/null`
    ap output: output, sucessful: $?.success?
    exit 0
  }

  register_subcommand(:fix) {
    unless Object.const_defined?(:FixSubcommand)
      found = PathEnv.find('new_h-fix')
      load found.first
    end

    if Object.const_defined?(:FixSubcommand)
      FixSubcommand.run(args)
      exit 0
    end

    raise Exception, 'Unable to load FixSubcommand'
  }

  # register_subcommand(:git) {
  #   GitSubcommand.run(args)
  # }


end

MainCommand.load_subcommands_by_prefix('h')
MainCommand.run

