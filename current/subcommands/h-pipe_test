
class PipeForkSubcommand < Subcommandable
  register_subcommand(:array) {
    pipe = CmdPipe.new('cat /Users/hiro/projects.yml', 'cat -n', 'sed "s/^/:>/"')
    ap shell_commands: pipe.shell_commands,
       runners: pipe.runners,
       positions: pipe.runners.map(&:position)
  }

  register_subcommand(:run) {
    CmdPipe.run('cat /Users/hiro/projects.yml', 'cat -n', 'sed "s/^/:>/"')
  }

  register_subcommand(:print) {
    CmdPipe.print('cat /Users/hiro/projects.yml', 'cat -n', 'sed "s/^/:>/"')
  }

  register_subcommand(:test){
    reader, writer = IO.pipe
    fork do
      reader.close

      puts 'inside the fork'
      writer.write('Hello from your child!')
      writer.close
    end

    puts 'outside the fork, closing the writer'
    writer.close

    puts 'waiting for the process to end...'
    Process.wait

    puts 'reading from reader'
    message = reader.read
    puts format('outside fork: reading message => "%s"', message)
    reader.close
  }
end

MainCommand.register_subcommand(:pipe_test) {
  PipeForkSubcommand.run(MainCommand.args)
}



# vim: ft=ruby