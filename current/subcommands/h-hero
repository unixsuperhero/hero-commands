
class HeroSrcSubcommand < Subcommandable
  let(:base_dir) { File.join(Dir.home, 'projects', 'hero-commands') }
  let(:src_dir) { File.join(base_dir, 'src') }
  let(:editor) { ENV['EDITOR'] || 'vim' }

  register_subcommand(:search) do
    Dir.chdir(base_dir)
    all_files = Dir[File.join('src', format('**/*'))].select(&File.method(:file?))
    puts args.inject(all_files){|files,arg|
      regexp = Regexp.new(arg, ?i)
      files.select{|f|
        f[regexp]
      }
    }.sort.uniq
  end

  register_subcommand(:edit) do
    Dir.chdir(base_dir)
    all_files = Dir[File.join('src', format('**/*'))].select(&File.method(:file?))
    matches = args.inject(all_files){|files,arg|
      regexp = Regexp.new(arg, ?i)
      files.select{|f|
        f[regexp]
      }
    }.sort.uniq

    Shell.new(base_dir).transact{|sh|
      editor = ENV['EDITOR'] || 'vim'
      sh.system(editor, *matches)
    }
  end
end

class HeroSubcommand < Subcommandable
  let(:base_dir) { File.join(Dir.home, 'projects', 'hero-commands') }
  let(:src_dir) { File.join(base_dir, 'src') }

  register_subcommand(:src) {
    HeroSrcSubcommand.run(args)
  }

  register_subcommand(:bins) {
    HeroHelper.run_inside_dir(src_dir) {
      search_inside = 'bin'
      if args.empty?
        puts Dir[File.join(search_inside, '**/*')].select(&File.method(:file?))
      else
        regexp = Regexp.new(args.first, ?i)
        puts Dir[File.join(search_inside, '**/*')].select{|f|
          File.file?(f) && f[regexp]
        }
      end
    }
  }

  register_subcommand(:subcommands) {
    HeroHelper.run_inside_dir(src_dir) {
      search_inside = 'subcommands'
      if args.empty?
        puts Dir[File.join(search_inside, '**/*')].select(&File.method(:file?))
      else
        regexp = Regexp.new(args.first, ?i)
        puts Dir[File.join(search_inside, '**/*')].select{|f|
          File.file?(f) && f[regexp]
        }
      end
    }
  }

  register_subcommand(:rippers) {
    HeroHelper.run_inside_dir(src_dir) {
      search_inside = 'rippers'
      if args.empty?
        puts Dir[File.join(search_inside, '**/*')].select(&File.method(:file?))
      else
        regexp = Regexp.new(args.first, ?i)
        puts Dir[File.join(search_inside, '**/*')].select{|f|
          File.file?(f) && f[regexp]
        }
      end
    }
  }

  register_subcommand(:libs) {
    HeroHelper.run_inside_dir(src_dir) {
      search_inside = 'lib'
      if args.empty?
        puts Dir[File.join(search_inside, '**/*')].select(&File.method(:file?))
      else
        regexp = Regexp.new(args.first, ?i)
        puts Dir[File.join(search_inside, '**/*')].select{|f|
          File.file?(f) && f[regexp]
        }
      end
    }
  }

  register_subcommand(:edit) {
    HeroHelper.run_inside_dir(src_dir) {
      regexp = Regexp.new(args.first, ?i)
      matches = Dir[File.join('**/*')].select{|f|
        File.file?(f) && f[regexp]
      }

      system('vim', *matches)
    }
  }

end

MainCommand.register_subcommand(:hero) {
  HeroSubcommand.run(MainCommand.args)
}



# vim: ft=ruby
