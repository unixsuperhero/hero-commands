
<%= inject_files 'src/lib/name_matcher.rb.erb', 'src/lib/config.rb.erb', 'src/lib/tmux.rb.erb' %>

class ProjectHelper
  class << self
    def projects
      config.data
    end

    def project_names
      config.data.keys
    end

    def project_dirs
      config.data.values
    end

    def project_for(partial)
      partial = partial[1..-1] if partial[0] == ?@
      project_matcher.match(partial).tap{|proj|
        proj.merge(dir: proj.data) unless proj.nil?
      }
    end

    def new_config
      @project_config ||= Config.new(yaml_file, 'projects').tap{|configuration|
        configuration.after_read(&config_after_read)
        configuration.before_save(&config_before_save)
        configuration.read!
      }
    end

    def config_after_read
      proc{|this|
        this.data.map{|k,v|
          expanded_path = File.expand_path(v)
          dug = this.instance_variable_get(:@data)
          # dug.dig(*this.data_path)
          dug = this.data_path.inject(dug){|h,k| h[k] ||= {} }
          dug.merge!(k => expanded_path)
        }
      }
    end

    def config_before_save
      proc{|this|
        this.data.map{|k,v|
          relative_path = v.sub(%r{^(/(?:Users|home)/[^/]+)(/?)}, '~\2/').sub(%r{//+}, ?/)
          dug = this.instance_variable_get(:@data)
          # dug = dug.dig(*this.data_path)
          dug = this.data_path.inject(dug){|h,k| h[k] ||= {} } # dug.dig(*this.data_path)
          dug.merge!(k => relative_path)
        }
      }
    end

    def config
      return new_config

      # --- THIS CODE IS OLD ---
      #
      Config.new(yaml_file, 'projects').tap{|configuration|
        configuration.after_read do |this|
          this.data.map{|k,v|
            expanded_path = File.expand_path(v)
            dug = this.instance_variable_get(:@data)
            dug = dug.dig(*this.data_path)
            dug.merge!(k => expanded_path)
          }
        end

        configuration.before_save do |this|
          this.data.map{|k,v|
            relative_path = v.sub(%r{^(/(?:Users|home)/[^/]+)(/?)}, '~\2/').sub(%r{//+}, ?/)
            dug = this.instance_variable_get(:@data)
            dug = dug.dig(*this.data_path)
            dug.merge!(k => relative_path)
          }
        end
        configuration.read!
      }
    end

    def project_matcher
      NameMatcher.new(config.data)
    end

    def yaml_file
      File.join(Dir.home, 'projects.yml')
    end

    def is_project?(partial)
      project_for(partial).is_a?(Value)
    end

    def dir_for(project_partial)
      m = project_for(project_partial)
      m.data if m
    end

    def tmux_session_for_project(project_name)
      proj = project_for(project_name)

      error_exit('No project found matching "%s"...' % project_name) unless proj

      name = proj.name
      path = proj.data

      puts
      puts format('Project Name: %s', name)
      puts format('Project Path: %s', path)
      puts

      Tmux.force_session(name, path)
    end
  end
end

