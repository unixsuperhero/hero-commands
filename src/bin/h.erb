#!/usr/bin/env ruby

require 'awesome_print'
require 'pry'
require 'yaml'
require 'shell'

<%=
  inject_files(
    'src/lib/hash_ext.rb.erb',
    'src/lib/config.rb.erb',
    'src/lib/value.rb.erb',
    'src/lib/name_matcher.rb.erb',
    'src/lib/shell_commandable.rb.erb',
    'src/lib/path_env.rb.erb',
    'src/lib/project_helper.rb.erb',
    'src/lib/list_filter.rb.erb',
    'src/lib/hero_helper.rb.erb'
  )
%>

class MainCommand
  include ShellCommandable

  def self.run(args=argv)
    if args.first && args.first[0] == ?@
      @project_context = ProjectHelper.project_for(args.first)
      args.shift
    end

    if project_context?
      HeroHelper.run_inside_dir(project_dir){ super }
    else
      super
    end
  end

  def self.project_context?
    ! @project_context.nil?
  end

  def self.project_dir
    return unless project_context?
    project_context.data
  end

  def self.project_context
    @project_context
  end

  def self.editor
    ENV['EDITOR'] || 'vim'
  end

  register_subcommand(:edit) {
    files = args.flat_map{|arg| PathEnv.search(arg) }

    HeroHelper.edit_in_editor(files)
  }

  register_subcommand(:google) {
    puts; puts; puts "might have to require uri"; puts; puts
    query = args.join(" ")
    encoded_query = URI.encode(query)
    url = format('http://google.com/search?q=%s', encoded_query)
    HeroHelper.exec_from('open', url)
  }

  register_subcommand(:pry) {
    puts 'Entering a pry session...'
    binding.pry
    puts 'done'
  }

  register_subcommand(:run) {
    error_exit('Nothing to run...pass in cmd as arguments.') if args.empty?
    puts HeroHelper.exec_from(*args)
  }

  register_subcommand(:fix) {
    unless Object.const_defined?(:FixSubcommand)
      found = PathEnv.find('new_h-fix')
      load found.first
    end

    if Object.const_defined?(:FixSubcommand)
      FixSubcommand.run(args)
      exit 0
    end

    raise Exception, 'Unable to load FixSubcommand'
  }

end

MainCommand.load_subcommands_by_prefix('h')
MainCommand.run



# vim: ft=ruby
